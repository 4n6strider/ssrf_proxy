#!/usr/bin/env ruby
#
# Copyright (c) 2015 Brendan Coles <bcoles@gmail.com>
# SSRF Proxy - https://github.com/bcoles/ssrf_proxy
# See the file 'LICENSE' for copying permission
#

require 'getoptlong'
require 'ssrf_proxy'

#
# @note output banner
#
def banner
puts "
_______________________________________________
                ___                            
    ___ ___ ___|  _|    ___ ___ ___ _ _ _ _    
   |_ -|_ -|  _|  _|   | . |  _| . |_'_| | |   
   |___|___|_| |_|     |  _|_| |___|_,_|_  |   
                       |_|             |___|   ".blue
puts "
                SSRF Proxy v#{SSRFProxy::VERSION}
      https://github.com/bcoles/ssrf_proxy"
puts "
_______________________________________________
".blue
end

#
# @note output usage
#
def usage

  puts "Usage:   ssrf-proxy [options] -u <SSRF URL>"
  puts "Example: ssrf-proxy -u http://target/?url=xxURLxx"
  puts "Options:"
  puts "
   -h, --help             Help
   -v, --verbose          Verbose output
   -d, --debug            Debugging output

  Server options:
   -p, --port=PORT        Listen port (Default: 8081)
       --interface=IP     Listen interface (Default: 127.0.0.1)
       --proxy=PROXY      Upstream HTTP proxy

  SSRF request options:
   -u, --url=URL          SSRF URL with 'xxURLxx' placeholder
       --method=METHOD    HTTP method (GET/POST/HEAD) (Default: GET)
       --post-data=DATA   HTTP post data
       --cookie=COOKIE    HTTP cookies (separated by ';')
       --user-agent=AGENT HTTP user-agent (Default: Mozilla/5.0)
       --timeout=SECONDS  Connection timeout in seconds (Default: 10)
       --ip-encoding=MODE Encode IP address for blacklist evasion.
                          (Modes: int, ipv6, oct, hex) (Default: none)
       --rules=RULES      Rules for parsing client request for xxURLxx
                          (separated by ',') (Default: none)

  HTTP response modification:
       --match=REGEX      Regex to match response body content.
                          (Default: \\A(.+)\\z)
       --strip=HEADERS    Headers to remove from the response.
                          (separated by ',') (Default: none)
       --guess-status     Replaces response status code and message
                          headers (determined by common strings in the
                          response body, such as 404 Not Found.)
       --guess-mime       Replaces response content-type header with the
                          appropriate mime type (determined by the file
                          extension of the requested resource.)

  Client request modification:
       --forward-cookies  Forward client HTTP cookies through proxy to
                          SSRF server.
       --body-to-uri      Convert POST parameters to GET parameters.
       --auth-to-uri      Move HTTP basic authentication credentials
                          to URI. (Example: http://[user:pass]@host/)
       --cookies-to-uri   Add request cookies to GET parameters.

"
  exit 1
end

#
# @note parse options and start server
#
def start_server

# get args
opts = GetoptLong.new(
  [ '-h', '--help',            GetoptLong::NO_ARGUMENT ],
  [ '-v', '--verbose',         GetoptLong::NO_ARGUMENT ],
  [ '-d', '--debug',           GetoptLong::NO_ARGUMENT ],

  [ '-p', '--port',            GetoptLong::REQUIRED_ARGUMENT ],
  [       '--interface',       GetoptLong::REQUIRED_ARGUMENT ],
  [       '--proxy',           GetoptLong::REQUIRED_ARGUMENT ],

  [ '-u', '--url',             GetoptLong::REQUIRED_ARGUMENT ],
  [       '--method',          GetoptLong::REQUIRED_ARGUMENT ],
  [       '--post-data',       GetoptLong::REQUIRED_ARGUMENT ],
  [       '--cookie',          GetoptLong::REQUIRED_ARGUMENT ],
  [       '--user-agent',      GetoptLong::REQUIRED_ARGUMENT ],
  [       '--timeout',         GetoptLong::REQUIRED_ARGUMENT ],

  [       '--ip-encoding',     GetoptLong::REQUIRED_ARGUMENT ],
  [       '--rules',           GetoptLong::REQUIRED_ARGUMENT ],
  [       '--forward-cookies', GetoptLong::NO_ARGUMENT ],
  [       '--body-to-uri',     GetoptLong::NO_ARGUMENT ],
  [       '--auth-to-uri',     GetoptLong::NO_ARGUMENT ],
  [       '--cookies-to-uri',  GetoptLong::NO_ARGUMENT ],

  [       '--match',           GetoptLong::REQUIRED_ARGUMENT ],
  [       '--strip',           GetoptLong::REQUIRED_ARGUMENT ],
  [       '--guess-status',    GetoptLong::NO_ARGUMENT ],
  [       '--guess-mime',      GetoptLong::NO_ARGUMENT ]
)

# local proxy server defaults
interface = '127.0.0.1'
port = 8081

# ssrf defaults
url = nil
rules = ''
ip_encoding = ''
method = 'GET'
post_data = ''
match = "\\A(.+)\\z"
strip = ''
guess_status = false
guess_mime = false
forward_cookies = false
body_to_uri = false
auth_to_uri = false
cookies_to_uri = false

# http connection defaults
cookie = ''
timeout = 10
upstream_proxy = nil
user_agent = 'Mozilla/5.0'

# logging
log_level = ::Logger::WARN

# handle args
opts.each do |opt, arg|
  case opt
  when '-p','--port'
    port=arg
  when '--interface'
    interface=arg
  when '-u','--url'
    url = arg
  when '--ip-encoding'
    ip_encoding=arg
  when '--rules'
    rules=arg
  when '--proxy'
    upstream_proxy = URI::parse(arg)
  when '--cookie'
    cookie=arg
  when '--timeout'
    timeout=arg.to_i
  when '--user-agent'
    user_agent=arg
  when '--method'
    method=arg
  when '--post-data'
    post_data=arg
  when '--match'
    match=arg
  when '--strip'
    strip=arg
  when '--guess-status'
    guess_status = true
  when '--guess-mime'
    guess_mime = true
  when '--forward-cookies'
    forward_cookies = true
  when '--body-to-uri'
    body_to_uri = true
  when '--auth-to-uri'
    auth_to_uri = true
  when '--cookies-to-uri'
    cookies_to_uri = true
  when '-h','--help'
    usage
  when '-v','--verbose'
    log_level = ::Logger::INFO unless log_level == ::Logger::DEBUG
  when '-d','--debug'
    log_level = ::Logger::DEBUG
  end
end

opts = {
  'proxy'          => "#{upstream_proxy}",
  'method'         => "#{method}",
  'post_data'      => "#{post_data}",
  'rules'          => "#{rules}",
  'ip_encoding'    => "#{ip_encoding}",
  'match'          => "#{match}",
  'strip'          => "#{strip}",
  'guess_mime'     => guess_mime,
  'guess_status'   => guess_status,
  'forward_cookies'=> forward_cookies,
  'body_to_uri'    => body_to_uri,
  'auth_to_uri'    => auth_to_uri,
  'cookies_to_uri' => cookies_to_uri,
  'cookie'         => "#{cookie}",
  'timeout'        => "#{timeout}",
  'user_agent'     => "#{user_agent}"
}

  # setup ssrf
  ssrf = SSRFProxy::HTTP.new(url, opts)
  ssrf.logger.level = log_level
  # start server
  begin
    ssrf_proxy = SSRFProxy::Server.new(interface, port, ssrf)
    ssrf_proxy.logger.level = log_level
    ssrf_proxy.serve
  rescue => e
    puts "Error: #{e.message}"
  end

end

banner
usage if ARGV.length == 0
start_server

